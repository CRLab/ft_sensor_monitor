/* auto-generated by genmsg_cpp from /arm/force_sensor_serial_port/msg/ForceTorque.msg.  Do not edit! */
#ifndef FORCE_SENSOR_SERIAL_PORT_FORCETORQUE_H
#define FORCE_SENSOR_SERIAL_PORT_FORCETORQUE_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"

namespace force_sensor_serial_port
{

//! \htmlinclude ForceTorque.msg.html

class ForceTorque : public ros::Message
{
public:
  typedef boost::shared_ptr<ForceTorque> Ptr;
  typedef boost::shared_ptr<ForceTorque const> ConstPtr;

  typedef roslib::Header _header_type;
  typedef double _xForceNewtons_type;
  typedef double _yForceNewtons_type;
  typedef double _zForceNewtons_type;
  typedef double _xTorqueNewtonMeters_type;
  typedef double _yTorqueNewtonMeters_type;
  typedef double _zTorqueNewtonMeters_type;

  roslib::Header header;
  double xForceNewtons;
  double yForceNewtons;
  double zForceNewtons;
  double xTorqueNewtonMeters;
  double yTorqueNewtonMeters;
  double zTorqueNewtonMeters;

  ForceTorque() : ros::Message(),
    xForceNewtons(0),
    yForceNewtons(0),
    zForceNewtons(0),
    xTorqueNewtonMeters(0),
    yTorqueNewtonMeters(0),
    zTorqueNewtonMeters(0)
  {
  }
  ForceTorque(const ForceTorque &copy) : ros::Message(),
    header(copy.header),
    xForceNewtons(copy.xForceNewtons),
    yForceNewtons(copy.yForceNewtons),
    zForceNewtons(copy.zForceNewtons),
    xTorqueNewtonMeters(copy.xTorqueNewtonMeters),
    yTorqueNewtonMeters(copy.yTorqueNewtonMeters),
    zTorqueNewtonMeters(copy.zTorqueNewtonMeters)
  {
    (void)copy;
  }
  ForceTorque &operator =(const ForceTorque &copy)
  {
    if (this == &copy)
      return *this;
    header = copy.header;
    xForceNewtons = copy.xForceNewtons;
    yForceNewtons = copy.yForceNewtons;
    zForceNewtons = copy.zForceNewtons;
    xTorqueNewtonMeters = copy.xTorqueNewtonMeters;
    yTorqueNewtonMeters = copy.yTorqueNewtonMeters;
    zTorqueNewtonMeters = copy.zTorqueNewtonMeters;
    return *this;
  }
  virtual ~ForceTorque() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("force_sensor_serial_port/ForceTorque"); }
  inline static std::string __s_getMD5Sum() { return std::string("b34fdd2e02f35ff10dc9a8e2137fa7ea"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "#                                                                              \n"
    "#                                                                               \n"
    "#                                                                               \n"
    "                                                                                \n"
    "# Corresponds to one of the force-torque sensors                                \n"
    "# Timestamp information\n"
    "\n"
    "Header header\n"
    "float64 xForceNewtons\n"
    "float64 yForceNewtons\n"
    "float64 zForceNewtons\n"
    "float64 xTorqueNewtonMeters\n"
    "float64 yTorqueNewtonMeters\n"
    "float64 zTorqueNewtonMeters                              \n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += header.serializationLength(); // header
    __l += 8; // xForceNewtons
    __l += 8; // yForceNewtons
    __l += 8; // zForceNewtons
    __l += 8; // xTorqueNewtonMeters
    __l += 8; // yTorqueNewtonMeters
    __l += 8; // zTorqueNewtonMeters
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
                             uint32_t seq) const
  {
    roslib::Header _ser_header = header;
    bool __reset_seq = (header.seq == 0);
    if (__reset_seq) _ser_header.seq = seq;
    write_ptr = _ser_header.serialize(write_ptr, seq);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, xForceNewtons);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, yForceNewtons);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, zForceNewtons);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, xTorqueNewtonMeters);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, yTorqueNewtonMeters);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, zTorqueNewtonMeters);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = header.deserialize(read_ptr);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, xForceNewtons);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, yForceNewtons);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, zForceNewtons);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, xTorqueNewtonMeters);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, yTorqueNewtonMeters);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, zTorqueNewtonMeters);
    return read_ptr;
  }
};

typedef boost::shared_ptr<ForceTorque> ForceTorquePtr;
typedef boost::shared_ptr<ForceTorque const> ForceTorqueConstPtr;


}

#endif
